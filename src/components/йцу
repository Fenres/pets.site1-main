import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import Card1 from './Card1';  // Импортируем компонент карточки

function Poisc({ onSuggestionsFetched }) {
  const [query, setQuery] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [noResults, setNoResults] = useState(false);
  const [loading, setLoading] = useState(false);
  const [searchLoading, setSearchLoading] = useState(false);
  const [isFocused, setIsFocused] = useState(false);
  const [cards, setCards] = useState([]);  // Состояние для карточек
  const navigate = useNavigate();

  const debounce = (func, delay) => {
    let timeout;
    return (...args) => {
      if (timeout) clearTimeout(timeout);
      timeout = setTimeout(() => {
        func(...args);
      }, delay);
    };
  };

  const fetchSuggestions = async (searchTerm) => {
    setLoading(true);
    try {
      const response = await fetch(`https://pets.сделай.site/api/search?query=${searchTerm}`);
      if (response.status === 200) {
        const data = await response.json();
        setSuggestions(data.data.orders);
        setNoResults(false);
        if (onSuggestionsFetched) {
          onSuggestionsFetched(data.data.orders);
        }
      } else if (response.status === 204) {
        setSuggestions([]);
        setNoResults(true);
      }
    } catch (error) {
      console.error('Error fetching suggestions:', error);
    }
    setLoading(false);
  };

  const debouncedFetch = useCallback(debounce(fetchSuggestions, 1000), []);

  const handleInputChange = (e) => {
    const value = e.target.value;
    setQuery(value);

    if (value.length > 2) {
      debouncedFetch(value);
    } else {
      setSuggestions([]);
      setNoResults(false);
    }
  };

  const handleSearch = async (e) => {
    e.preventDefault();
    setSearchLoading(true);

    try {
      const response = await fetch(`https://pets.сделай.site/api/search?query=${query}`);
      if (response.status === 200) {
        const data = await response.json();
        setCards(data.data.orders);  // Сохраняем результаты поиска в состоянии
        setNoResults(false);
        setSuggestions([]);  // Очищаем подсказки
      } else if (response.status === 204) {
        setCards([]);
        setNoResults(true);
      }
    } catch (error) {
      console.error('Error fetching cards:', error);
    }

    setSearchLoading(false);
  };

  const handleBlur = () => {
    setTimeout(() => setIsFocused(false), 100);
  };

  const handleFocus = () => {
    setIsFocused(true);
  };

  return (
    <div>
      <form className="d-flex mb-2 mb-lg-0" onSubmit={handleSearch}>
        <input
          className="form-control me-2"
          type="search"
          value={query}
          onChange={handleInputChange}
          onBlur={handleBlur}
          onFocus={handleFocus}
          placeholder="Поиск"
          aria-label="Search"
        />
        <button
          className="btn btn-primary me-2"
          disabled={searchLoading || query.length < 3}
        >
          {'Поиск'}
        </button>
      </form>

      {/* Отображение карточек после поиска */}
      {cards.length > 0 && (
        <ul className="list-group mt-3">
          {cards.map((pet) => (
            <li className="list-group-item" key={pet.id}>
              <Card1 pet={pet} onClick={(pet) => console.log(pet)} />
            </li>
          ))}
        </ul>
      )}

      {noResults && !loading && <p>Результатов нет</p>}
    </div>
  );
}

export default Poisc;
